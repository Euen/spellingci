%% == Erlang Compiler ==

{erl_opts, [
  warn_unused_vars,
  warn_export_all,
  warn_shadow_vars,
  warn_unused_import,
  warn_unused_function,
  warn_bif_clash,
  warn_unused_record,
  warn_deprecated_function,
  warn_obsolete_guard,
  strict_validation,
  warn_export_vars,
  warn_exported_vars,
  warn_missing_spec,
  warn_untyped_record,
  debug_info,
  {parse_transform, lager_transform}
]}.

%% == Dependencies ==

{deps, [
  {mixer, "0.1.5", {pkg, inaka_mixer}},
  {lager, "3.2.1"},
  {sumo_db, "0.6.4"},
  {sumo_rest, {git, "https://github.com/inaka/sumo_rest.git", {ref, "0.2.1"}}},
  {hackney, "1.6.1"},
  {jiffy, "0.14.7"},
  {egithub, "0.2.8"},
  {uuid, "1.5.2", {pkg, uuid_erl}},
  {sheldon, "0.1.1"}
]}.

%% == Profiles ==

{profiles, [
  {test, [
    {deps, [
      {katana_test, "0.1.1"},
      {meck, "0.8.4"}
    ]}
  ]}
]}.

%% == Common Test ==

{ct_compile_opts, [
  warn_unused_vars,
  warn_export_all,
  warn_shadow_vars,
  warn_unused_import,
  warn_unused_function,
  warn_bif_clash,
  warn_unused_record,
  warn_deprecated_function,
  warn_obsolete_guard,
  strict_validation,
  warn_export_vars,
  warn_exported_vars,
  warn_missing_spec,
  warn_untyped_record,
  debug_info,
  {parse_transform, lager_transform}
]}.

{ct_opts, [
  {sys_config, ["test/test.config"]}
]}.

%% == Cover ==

{cover_enabled, true}.

{cover_opts, [verbose]}.

%% == EDoc ==

{edoc_opts, [
  {report_missing_types, true},
  {source_path, ["src"]},
  {report_missing_types, true},
  {todo, true},
  {packages, false},
  {subpackages, false}
]}.

%% == Dialyzer ==

{dialyzer, [
  {plt_apps, top_level_deps},
  {plt_extra_apps, []},
  {plt_location, local},
  {plt_prefix, "spellingci"},
  {base_plt_location, "."},
  {base_plt_prefix, "spellingci"}
]}.

%% == Release ==

{relx, [{release, {spellingci, "0.0.1"},
          [spellingci],
          [ {dev_mode, false}
          , {include_erts, true}
          ]},
        {release, {spellingci_dev, "0.0.1"},
          [spellingci],
          [{dev_mode, true}]},
        {sys_config, "./config/app.config"},
        {vm_args, "build/vm.args"},
        {extended_start_script, true}
       ]}.

{overrides, [{override, jiffy, [{plugins, [pc]}, {artifacts, ["priv/jiffy.so"]}, {provider_hooks, [{post, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}]}]}.
